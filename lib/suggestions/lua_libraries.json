{
  "basic": [
    {
      "text": "_VERSION",
      "type": "variable",
      "rightLabelHTML": "_VERSION",
      "description": "Returns the running lua api version as a string, e.i., \"Lua 5.3\".",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-_VERSION",
      "replacementPrefix": "ver"
    },
    {
      "snippet": "print '${1:text}'$0",
      "type": "function",
      "rightLabelHTML": "print 'text'",
      "description": "Prints the given text.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-print",
      "replacementPrefix": "sprint"
    },
    {
      "snippet": "print(${1:args})$0",
      "type": "function",
      "rightLabelHTML": "print([args])",
      "description": "Prints the given arguments, separating them with a tab character (\\t).",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-print",
      "replacementPrefix": "print"
    },
    {
      "snippet": "assert(${1:value}${2:, ${3:msg}})$0",
      "type": "function",
      "rightLabelHTML": "assert(value[, msg])",
      "description": "If the value is false or nil, an error is thrown with the given message.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-assert",
      "replacementPrefix": "assert"
    },
    {
      "snippet": "collectgarbage(${1:${2:action}${3:, ${4:arg}}})$0",
      "type": "function",
      "rightLabelHTML": "collectgarbage([action[, arg]])",
      "description": "Executes the specified action on the garbage collector.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-collectgarbage",
      "replacementPrefix": "cgar"
    },
    {
      "snippet": "dofile(${1:file})$0",
      "type": "function",
      "rightLabelHTML": "dofile([file])",
      "description": "Opens the named file and executes its contents as a Lua chunk.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-dofile",
      "replacementPrefix": "dofile"
    },
    {
      "snippet": "error(${1:msg}${2:, ${3:level}})$0",
      "type": "function",
      "rightLabelHTML": "error(msg[, level])",
      "description": "Throws a Lua error and breaks out of the current call stack.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-error",
      "replacementPrefix": "error"
    },
    {
      "snippet": "getmetatable(${1:obj})$0",
      "type": "function",
      "rightLabelHTML": "getmetatable(obj)",
      "description": "Returns the metatable of an object. This function ignores the metatable's __metatable field.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-getmetatable",
      "replacementPrefix": "getmeta"
    },
    {
      "snippet": "ipairs(${1:tbl})$0",
      "type": "function",
      "rightLabelHTML": "ipairs(tbl)",
      "description": "Returns an iterator function for a for loop, to return ordered key-value pairs from a table.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-ipairs",
      "replacementPrefix": "ipairs"
    },
    {
      "snippet": "load(${1:chunk}${2:, ${3:chunk_name}${4:, ${5:mode}${6:, ${7:env}}}})$0",
      "type": "function",
      "rightLabelHTML": "load(chunk[, chunk_name[, mode[, env]]])",
      "description": "Loads a chunk.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-load",
      "replacementPrefix": "load"
    },
    {
      "snippet": "loadfile(${1:file}${2:, ${3:mode}${4:, ${5:env}}})$0",
      "type": "function",
      "rightLabelHTML": "loadfile([file[, mode[, env]]])",
      "description": "Loads a chunk from the named file or from the standard input, if no file name is given.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-loadfile",
      "replacementPrefix": "loadfile"
    },
    {
      "snippet": "next(${1:tbl}, ${2:index})$0",
      "type": "function",
      "rightLabelHTML": "next(tbl, index)",
      "description": "Returns the next key and value pair in the table.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-next",
      "replacementPrefix": "next"
    },
    {
      "snippet": "pairs(${1:tbl})$0",
      "type": "function",
      "rightLabelHTML": "pairs(tbl)",
      "description": "Returns an iterator function(next) for a for loop that will return the values of the specified table in an arbitrary order.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-pairs",
      "replacementPrefix": "pairs"
    },
    {
      "snippet": "pcall(${1:func}$2:, ${3:args}})$0",
      "type": "function",
      "rightLabelHTML": "pcall(func[, args])",
      "description": "Calls a function and catches an error that can be thrown while the execution of the call.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-pcall",
      "replacementPrefix": "pcall"
    },
    {
      "snippet": "rawequal(${1:value1}, ${2:value2})$0",
      "type": "function",
      "rightLabelHTML": "rawequal(value1, value2)",
      "description": "Compares the two values without calling their __eq operator.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-rawequal",
      "replacementPrefix": "rawequal"
    },
    {
      "snippet": "rawget(${1:tbl}, ${2:index})$0",
      "type": "function",
      "rightLabelHTML": "rawget(tbl, index)",
      "description": "Gets the value with the specified key from the table without calling the __index method.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-rawget",
      "replacementPrefix": "rawget"
    },
    {
      "snippet": "rawlen(${1:obj})$0",
      "type": "function",
      "rightLabelHTML": "rawlen(obj)",
      "description": "Returns the length of the object, which must be a table or a string, without invoking the __len method. Returns an integer.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-rawlen",
      "replacementPrefix": "rawlen"
    },
    {
      "snippet": "rawset(${1:tbl}, ${2:index}, ${3:value})$0",
      "type": "function",
      "rightLabelHTML": "rawset(tbl, index, value)",
      "description": "Sets the value with the specified key from the table without calling the __newindex method.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-rawset",
      "replacementPrefix": "rawset"
    },
    {
      "snippet": "select(${1:arg}, ${2:args})$0",
      "type": "function",
      "rightLabelHTML": "select(arg, args)",
      "description": "Selects a single argument from the given arguments or gets the count of values in it.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-select",
      "replacementPrefix": "select"
    },
    {
      "snippet": "setmetatable(${1:obj}, ${2:metatbl})$0",
      "type": "function",
      "rightLabelHTML": "setmetatable(obj, metatbl)",
      "description": "Sets, changes or removes a object's metatable. Returns the given object.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-setmetatable",
      "replacementPrefix": "setmeta"
    },
    {
      "snippet": "tonumber(${1:value}${2:, ${3:base}})$0",
      "type": "function",
      "rightLabelHTML": "tonumber(value[, base])",
      "description": "Attempts to convert the value to a number and returns it. Returns nil on failure.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-tonumber",
      "replacementPrefix": "tonumber"
    },
    {
      "snippet": "tostring(${1:value})$0",
      "type": "function",
      "rightLabelHTML": "tostring(value)",
      "description": "Attempts to convert the value to a string and returns it.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-tostring",
      "replacementPrefix": "tostring"
    },
    {
      "snippet": "type(${1:var})$0",
      "type": "function",
      "rightLabelHTML": "type(var)",
      "description": "Returns a string representing the type of the passed object.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-type",
      "replacementPrefix": "type"
    },
    {
      "snippet": "xpcall(${1:func}, ${2:msgh}${3:, ${4:args}})$0",
      "type": "function",
      "rightLabelHTML": "xpcall(func, msgh[, args])",
      "description": "Attempts to call the first function. If the execution succeeds, this returns true followed by the returns of the function. If execution fails, this returns false and the second function is called with the error message.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-xpcall",
      "replacementPrefix": "xpcall"
    }
  ],
  "coroutine": [
    {
      "snippet": "coroutine.create(${1:func})$0",
      "type": "function",
      "rightLabelHTML": "coroutine.create(func)",
      "description": "Creates a coroutine of the given function.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-coroutine.create",
      "replacementPrefix": "corcreate"
    },
    {
      "snippet": "coroutine.isyieldable()",
      "type": "function",
      "rightLabelHTML": "coroutine.isyieldable()",
      "description": "Returns true when the running coroutine can yield.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-coroutine.isyieldable",
      "replacementPrefix": "corisyield"
    },
    {
      "snippet": "coroutine.resume(${1:coro}${2:, ${3:args}})$0",
      "type": "function",
      "rightLabelHTML": "coroutine.resume(coro[, args])",
      "description": "Resumes the given coroutine and passes the given args to either the function arguments or the coroutine.yield that is inside that function and returns whatever yield is called with the next time or by the final return in the function.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-coroutine.resume",
      "replacementPrefix": "corres"
    },
    {
      "snippet": "coroutine.running()",
      "type": "function",
      "rightLabelHTML": "coroutine.running()",
      "description": "Returns the active coroutine or nil if we are not within a coroutine.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-coroutine.running",
      "replacementPrefix": "corrun"
    },
    {
      "snippet": "coroutine.status(${1:coro})$0",
      "type": "function",
      "rightLabelHTML": "coroutine.status(coro)",
      "description": "Returns the status of the coroutine passed to it, the possible statuses are \"suspended\", \"running\" and \"dead\".",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-coroutine.status",
      "replacementPrefix": "corstatus"
    },
    {
      "snippet": "coroutine.wrap(${1:func})$0",
      "type": "function",
      "rightLabelHTML": "coroutine.wrap(func)",
      "description": "Returns a function which calling is equivalent with calling coroutine.resume with the coroutine and all extra parameters.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-coroutine.wrap",
      "replacementPrefix": "corwrap"
    },
    {
      "snippet": "coroutine.yield(${1:extra})$0",
      "type": "function",
      "rightLabelHTML": "coroutine.yield([extra])",
      "description": "Pauses the active coroutine and passes all additional variables to the call of coroutine.resume that resumed the coroutine last time, and returns all additional variables that were passed to the previous call of resume.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-coroutine.yield",
      "replacementPrefix": "coryield"
    }
  ],
  "package": [
    {
      "snippet": "require '${1:name}'$0",
      "type": "function",
      "rightLabelHTML": "require 'name'",
      "description": "First tries to load a binary module with the given name, if unsuccessful, it tries to load a Lua module with the given name.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-require",
      "replacementPrefix": "sreq"
    },
    {
      "snippet": "require(${1:name})$0",
      "type": "function",
      "rightLabelHTML": "require(name)",
      "description": "First tries to load a binary module with the given name, if unsuccessful, it tries to load a Lua module with the given name.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-require",
      "replacementPrefix": "req"
    },
    {
      "text": "package.config",
      "type": "variable",
      "rightLabelHTML": "package.config",
      "description": "A string describing some compile-time configurations for packages.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-package.config",
      "replacementPrefix": "packconfig"
    },
    {
      "text": "package.cpath",
      "type": "variable",
      "rightLabelHTML": "package.cpath",
      "description": "The path used by function(require) to search for a C loader.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-package.cpath",
      "replacementPrefix": "packcpath"
    },
    {
      "text": "package.loaded",
      "type": "variable",
      "rightLabelHTML": "package.loaded",
      "description": "A table used by function(require) to control which modules are already loaded.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-package.loaded",
      "replacementPrefix": "packloaded"
    },
    {
      "snippet": "package.loadlib(${1:lib}, ${2:func})$0",
      "type": "function",
      "rightLabelHTML": "package.loadlib(lib, func)",
      "description": "Dynamically links the host program with the given C library.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-package.loadlib",
      "replacementPrefix": "packloadlib"
    },
    {
      "text": "package.path",
      "type": "variable",
      "rightLabelHTML": "package.path",
      "description": "The path used by function(require) to search for a Lua loader.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-package.path",
      "replacementPrefix": "packpath"
    },
    {
      "text": "package.preload",
      "type": "variable",
      "rightLabelHTML": "package.preload",
      "description": "A table to store loaders for specific modules.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-package.preload",
      "replacementPrefix": "packpreload"
    },
    {
      "text": "package.searchers",
      "type": "variable",
      "rightLabelHTML": "package.searchers",
      "description": "A table used by function(require) to control how to load modules.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-package.searchers",
      "replacementPrefix": "packs"
    },
    {
      "snippet": "package.searchpath(${1:name}, ${2:path}${3:, ${4:sep}${5:, ${6:rep}}})$0",
      "type": "function",
      "rightLabelHTML": "package.searchpath(name, path[, sep[, rep]])",
      "description": "Searches for the given name in the given path.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-package.searchpath",
      "replacementPrefix": "packspath"
    }
  ],
  "string": [
    {
      "snippet": "string.byte(${1:str}${2:, ${3:i_start}${4:, ${5:i_end}}})$0",
      "type": "function",
      "rightLabelHTML": "string.byte(str[, i_start[, i_end]])",
      "description": "Returns the given string's characters in their numeric ASCII representation.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.byte",
      "replacementPrefix": "strbyte"
    },
    {
      "snippet": "string.char(${1:bytes})$0",
      "type": "function",
      "rightLabelHTML": "string.char([bytes])",
      "description": "Takes the given numerical bytes and converts them to a string.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.char",
      "replacementPrefix": "strchar"
    },
    {
      "snippet": "string.dump(${1:func}${2:, ${3:strip}})$0",
      "type": "function",
      "rightLabelHTML": "string.dump(func[, strip])",
      "description": "Returns the binary bytecode of the given function.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.dump",
      "replacementPrefix": "strdump"
    },
    {
      "snippet": "string.find(${1:str}, ${2:pattern}${3:, ${4:i_start}${5:, ${6:plain}}})$0",
      "type": "function",
      "rightLabelHTML": "string.find(str, pattern[, i_start[, plain]])",
      "description": "Attempts to find the specified substring in a string.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.find",
      "replacementPrefix": "strfind"
    },
    {
      "snippet": "string.format(${1:format}, ${2:args})$0",
      "type": "function",
      "rightLabelHTML": "string.format(format, args)",
      "description": "Formats the specified values into the string given.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.format",
      "replacementPrefix": "strformat"
    },
    {
      "snippet": "string.gmatch(${1:str}, ${2:pattern})$0",
      "type": "function",
      "rightLabelHTML": "string.gmatch(str, pattern)",
      "description": "Returns an iterator which will return either one value if no capture groups are defined, or any capture group matches.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.gmatch",
      "replacementPrefix": "strgmatch"
    },
    {
      "snippet": "string.gsub(${1:str}, ${2:pattern}, ${3:repl}${4:, ${5:n}})$0",
      "type": "function",
      "rightLabelHTML": "string.gsub(str, pattern, repl[, n])",
      "description": "This functions main purpose is to replace certain character sequences in a string.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.gsub",
      "replacementPrefix": "strgsub"
    },
    {
      "snippet": "string.len(${1:str})$0",
      "type": "function",
      "rightLabelHTML": "string.len(str)",
      "description": "Counts the number of characters in the string (length). This is equivalent to using the length operator (#).",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.len",
      "replacementPrefix": "strlen"
    },
    {
      "snippet": "string.lower(${1:str})$0",
      "type": "function",
      "rightLabelHTML": "string.lower(str)",
      "description": "Changes any upper-case letters in a string to lower-case letters.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.lower",
      "replacementPrefix": "strlower"
    },
    {
      "snippet": "string.match(${1:str}, ${2:pattern}${3:, ${4:i_start}})$0",
      "type": "function",
      "rightLabelHTML": "string.match(str, pattern[, i_start])",
      "description": "Finds a pattern in a string.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.match",
      "replacementPrefix": "strmatch"
    },
    {
      "snippet": "string.pack(${1:format}, ${2:args})$0",
      "type": "function",
      "rightLabelHTML": "string.pack(format, args)",
      "description": "Returns a binary string containing arguments packed according to the format string.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.pack",
      "replacementPrefix": "strpack"
    },
    {
      "snippet": "string.packsize(${1:format})$0",
      "type": "function",
      "rightLabelHTML": "string.packsize(format)",
      "description": "Returns the size of a string resulting from string.pack with the given format.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.packsize",
      "replacementPrefix": "strpacksize"
    },
    {
      "snippet": "string.rep(${1:str}, ${2:n}${3:, ${4:sep}})$0",
      "type": "function",
      "rightLabelHTML": "string.rep(str, n[, sep])",
      "description": "Repeats a string by the provided number, with an optional separator.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.rep",
      "replacementPrefix": "strrep"
    },
    {
      "snippet": "string.reverse(${1:str})$0",
      "type": "function",
      "rightLabelHTML": "string.reverse(str)",
      "description": "Reverses a string.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.reverse",
      "replacementPrefix": "strreverse"
    },
    {
      "snippet": "string.sub(${1:str}, ${2:i_start}${3:, ${4:i_end}})$0",
      "type": "function",
      "rightLabelHTML": "string.sub(str, i_start, i_end)",
      "description": "Returns a sub-string, starting from the character at position i_start of the string (inclusive), and optionally ending at the character at position i_end of the string (also inclusive). If i_end is not given, the rest of the string is returned.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.sub",
      "replacementPrefix": "strsub"
    },
    {
      "snippet": "string.unpack(${1:format}, ${2:str}${3:, ${4:i}})$0",
      "type": "function",
      "rightLabelHTML": "string.unpack(format_string, str[, i])",
      "description": "Returns the values packed in a string according to the format string.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.unpack",
      "replacementPrefix": "strunpack"
    },
    {
      "snippet": "string.upper(${1:str})$0",
      "type": "function",
      "rightLabelHTML": "string.upper(str)",
      "description": "Changes any lower-case letters in a string to upper-case letters.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-string.upper",
      "replacementPrefix": "strupper"
    }
  ],
  "utf8": [
    {
      "snippet": "utf8.char(${1:number})$0",
      "type": "function",
      "rightLabelHTML": "utf8.char([number])",
      "description": "Converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-utf8.char",
      "replacementPrefix": "utfchar"
    },
    {
      "text": "utf8.charpattern",
      "type": "variable",
      "rightLabelHTML": "utf8.charpattern",
      "description": "Returns \"[%z\\x01-\\x7F\\xC2-\\xF4][\\x80-\\xBF]*\", which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-utf8.charpattern",
      "replacementPrefix": "utfcharpattern"
    },
    {
      "snippet": "utf8.codepoint(${1:str}${2:, ${3:i_start}${4:, ${5:i_end}}})$0",
      "type": "function",
      "rightLabelHTML": "utf8.codepoint(str[, i_start[, i_end]])",
      "description": "Returns the codepoints (as numbers) from all characters in the given string that start between byte position i_start and i_end. It raises an error if it meets any invalid byte sequence. This functions similarly to string.byte.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-utf8.codepoint",
      "replacementPrefix": "utfcodepoint"
    },
    {
      "snippet": "utf8.codes(${1:str})$0",
      "type": "function",
      "rightLabelHTML": "utf8.codes(str)",
      "description": "Returns an iterator (like string.gmatch) which returns both the position and codepoint of each utf8 character in the string. It raises an error if it meets any invalid byte sequence.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-utf8.codes",
      "replacementPrefix": "utfcodes"
    },
    {
      "snippet": "utf8.len(${1:str}${2:, ${3:i_start}${4:, ${5:i_end}}})$0",
      "type": "function",
      "rightLabelHTML": "utf8.len(str[, i_start[, i_end]])",
      "description": "Returns the number of UTF-8 sequences in the given string between positions i_start and i_end (both inclusive). If it finds any invalid UTF-8 byte sequence, returns false as well as the position of the first invalid byte.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-utf8.len",
      "replacementPrefix": "utflen"
    },
    {
      "snippet": "utf8.offset(${1:str}, ${2:n}${3:, ${4:i_start}})$0",
      "type": "function",
      "rightLabelHTML": "utf8.offset(str, n[, i_start])",
      "description": "Returns the byte-index of the n'th UTF-8-character after the given i_start (nil if none). i_start defaults to 1 when n is positive and -1 when n is negative. If n is zero, this function instead returns the byte-index of the UTF-8-character i_start lies within.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-utf8.offset",
      "replacementPrefix": "utfoffset"
    }
  ],
  "table": [
    {
      "snippet": "table.concat(${1:tbl}${2:, ${3:sep}${4:, ${5:i_start}${6:, ${7:i_end}}}})$0",
      "type": "function",
      "rightLabelHTML": "table.concat(tbl, sep, i_start, i_end)",
      "description": "Concatenates the contents of a table to a string.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-table.concat",
      "replacementPrefix": "tabcon"
    },
    {
      "snippet": "table.insert(${1:tbl}${3:, ${4:i}}, ${2:value})$0",
      "type": "function",
      "rightLabelHTML": "table.insert(tbl, i, value)",
      "description": "Inserts a value into a table at the end of the table or at the given position.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-table.insert",
      "replacementPrefix": "tabins"
    },
    {
      "snippet": "table.move(${1:tbl1}, ${2:f}, ${3:e}, ${4:t}${5:, ${6:tbl2}})$0",
      "type": "function",
      "rightLabelHTML": "table.move(tbl1, f, e, t[, tbl2])",
      "description": "Moves elements from table tbl1 to table tbl2.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-table.move",
      "replacementPrefix": "tabmove"
    },
    {
      "snippet": "table.pack(${1:args})$0",
      "type": "function",
      "rightLabelHTML": "table.pack(args)",
      "description": "Returns a new table with all parameters stored into keys 1, 2, etc. and with a field \"n\" with the total number of parameters.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-table.pack",
      "replacementPrefix": "tabpack"
    },
    {
      "snippet": "table.remove(${1:tbl}${2:, ${3:i}})$0",
      "type": "function",
      "rightLabelHTML": "table.remove(tbl[, i])",
      "description": "Removes a value from a table and shifts any other values down to fill the gap.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-table.remove",
      "replacementPrefix": "tabrem"
    },
    {
      "snippet": "table.sort(${1:tbl}${2:, ${3:func}})$0",
      "type": "function",
      "rightLabelHTML": "table.sort(tbl[, func])",
      "description": "Sorts a table either ascending or by the given sort function.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-table.sort",
      "replacementPrefix": "tabsort"
    },
    {
      "snippet": "table.unpack(${1:tbl}${2:, ${3:i_start}${4:, ${5:i_end}}})$0",
      "type": "function",
      "rightLabelHTML": "table.unpack(tbl[, i_start[, i_end]])",
      "description": "Returns the elements from the given table.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-table.unpack",
      "replacementPrefix": "tabunpack"
    }
  ],
  "math": [
    {
      "snippet": "math.abs(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.abs(x)",
      "description": "Calculates the absolute value of a number (effectively removes any negative sign).",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.abs",
      "replacementPrefix": "mathabs"
    },
    {
      "snippet": "math.acos(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.acos(x)",
      "description": "Returns the arc cosine of the given number.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.acos",
      "replacementPrefix": "mathacos"
    },
    {
      "snippet": "math.asin(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.asin(x)",
      "description": "Returns the arc sine of the given number.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.asin",
      "replacementPrefix": "mathasin"
    },
    {
      "snippet": "math.atan(${1:y}${2:, ${3:x}})$0",
      "type": "function",
      "rightLabelHTML": "math.atan(y[, x])",
      "description": "Returns the arc tangent of the given number.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.atan",
      "replacementPrefix": "mathatan"
    },
    {
      "snippet": "math.ceil(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.ceil(x)",
      "description": "Ceils or rounds a number up.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.ceil",
      "replacementPrefix": "mathceil"
    },
    {
      "snippet": "math.cos(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.cos(x)",
      "description": "Returns the cosine of given angle.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.cos",
      "replacementPrefix": "mathcos"
    },
    {
      "snippet": "math.deg(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.deg(x)",
      "description": "Converts radians to degrees.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.deg",
      "replacementPrefix": "mathdeg"
    },
    {
      "snippet": "math.exp(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.exp(x)",
      "description": "Returns the x power of the Euler constant e.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.exp",
      "replacementPrefix": "mathexp"
    },
    {
      "snippet": "math.floor(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.floor(x)",
      "description": "Floors or rounds a number down.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.floor",
      "replacementPrefix": "mathfloor"
    },
    {
      "snippet": "math.fmod(${1:x}, ${2:y})$0",
      "type": "function",
      "rightLabelHTML": "math.fmod(x, y)",
      "description": "Returns the modulus of the specified values.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.fmod",
      "replacementPrefix": "mathfmod"
    },
    {
      "text": "math.huge",
      "type": "variable",
      "rightLabelHTML": "math.huge",
      "description": "Returns a variable that effectively represents infinity, in the sense that in any numerical comparison every number will be less than this.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.huge",
      "replacementPrefix": "mathhuge"
    },
    {
      "snippet": "math.log(${1:x}${2:, ${3:base}})$0",
      "type": "function",
      "rightLabelHTML": "math.log(x[, base])",
      "description": "With one argument, return the natural logarithm of x (to base e). With two arguments, return the logarithm of x to the given base, calculated as log(x)/log(base).",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.log",
      "replacementPrefix": "mathlog"
    },
    {
      "snippet": "math.max(${1:args})$0",
      "type": "function",
      "rightLabelHTML": "math.max(args)",
      "description": "Returns the largest value of all arguments.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.max",
      "replacementPrefix": "mathmax"
    },
    {
      "text": "math.maxinteger",
      "type": "variable",
      "rightLabelHTML": "math.maxinteger",
      "description": "Returns the largest value an integer can be.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.maxinteger",
      "replacementPrefix": "mathmaxint"
    },
    {
      "snippet": "math.min(${1:args})$0",
      "type": "function",
      "rightLabelHTML": "math.min(args)",
      "description": "Returns the smallest value of all arguments.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.min",
      "replacementPrefix": "mathmin"
    },
    {
      "text": "math.mininteger",
      "type": "variable",
      "rightLabelHTML": "math.mininteger",
      "description": "Returns the lowest value an integer can be.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.mininteger",
      "replacementPrefix": "mathminint"
    },
    {
      "snippet": "math.modf(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.modf(x)",
      "description": "Returns the integral and fractional component of the modulo operation.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.modf",
      "replacementPrefix": "mathmodf"
    },
    {
      "text": "math.pi",
      "type": "variable",
      "rightLabelHTML": "math.pi",
      "description": "Returns a variable containing the mathematical constant pi.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.pi",
      "replacementPrefix": "mathpi"
    },
    {
      "snippet": "math.rad(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.rad(x)",
      "description": "Converts an angle in degrees to it's equivalent in radians.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.rad",
      "replacementPrefix": "mathrad"
    },
    {
      "snippet": "math.random(${1:m}, ${2:n})$0",
      "type": "function",
      "rightLabelHTML": "math.random([m[, n]])",
      "description": "When called without arguments, returns a uniform pseudo-random real number in the range 0 to 1 which includes 0 but excludes 1. When called with an integer number m, returns a uniform pseudo-random integer in the range 1 to m inclusive. When called with two integer numbers m and n, returns a uniform pseudo-random integer in the range m to n inclusive.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.random",
      "replacementPrefix": "mathran"
    },
    {
      "snippet": "math.randomseed(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.randomseed(x)",
      "description": "Seeds the random number generator. The same seed will guarantee the same sequence of numbers each time with function(math.random).",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.randomseed",
      "replacementPrefix": "mathranseed"
    },
    {
      "snippet": "math.sin(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.sin(x)",
      "description": "Returns the sine of given angle.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.sin",
      "replacementPrefix": "mathsin"
    },
    {
      "snippet": "math.sqrt(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.sqrt(x)",
      "description": "Returns the square root of the number.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.sqrt",
      "replacementPrefix": "mathsqrt"
    },
    {
      "snippet": "math.tan(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.tan(x)",
      "description": "Returns the tangent of the given angle.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.tan",
      "replacementPrefix": "mathtan"
    },
    {
      "snippet": "math.tointeger(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.tointeger(x)",
      "description": "Attempts to convert the given value to an integer and returns it.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.tointeger",
      "replacementPrefix": "mathtoint"
    },
    {
      "snippet": "math.type(${1:x})$0",
      "type": "function",
      "rightLabelHTML": "math.type(x)",
      "description": "Returns \"integer\" if the given number is an integer, \"float\" if it is a float, or nil if it isn't a number.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.type",
      "replacementPrefix": "mathtype"
    },
    {
      "snippet": "math.ult(${1:m}, ${2:n})$0",
      "type": "function",
      "rightLabelHTML": "math.ult(m, n)",
      "description": "Returns a boolean, true if and only if m is below n when they are compared as unsigned integers.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-math.ult",
      "replacementPrefix": "mathult"
    }
  ],
  "io": [
    {
      "snippet": "io.close(${1:file})$0",
      "type": "function",
      "rightLabelHTML": "io.close([file])",
      "description": "Closes the given file or the current output file if none is given.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-io.close",
      "replacementPrefix": "ioclose"
    },
    {
      "snippet": "io.flush()",
      "type": "function",
      "rightLabelHTML": "io.flush()",
      "description": "Saves any written data to the current output file.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-io.flush",
      "replacementPrefix": "ioflush"
    },
    {
      "snippet": "io.input(${1:file})$0",
      "type": "function",
      "rightLabelHTML": "io.input([file])",
      "description": "When called with a file name, it opens the named file (in text mode), and sets its handle as the default input file. When called with a file handle, it simply sets this file handle as the default input file. When called without parameters, it returns the current default input file.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-io.input",
      "replacementPrefix": "ioinput"
    },
    {
      "snippet": "io.lines(${1:${2:file}${3:, ${4:formats}}})$0",
      "type": "function",
      "rightLabelHTML": "io.lines([file[, formats]])",
      "description": "Opens the given file name in read mode and returns an iterator function that, each time it is called, reads the file according to the given formats.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-io.lines",
      "replacementPrefix": "iolines"
    },
    {
      "snippet": "io.open(${1:file}${2:, ${3:mode}})$0",
      "type": "function",
      "rightLabelHTML": "io.open(file[, mode])",
      "description": "This function opens a file, in the given mode. In case of success, it returns a new file handle.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-io.open",
      "replacementPrefix": "ioopen"
    },
    {
      "snippet": "io.output(${1:file})$0",
      "type": "function",
      "rightLabelHTML": "io.output([file])",
      "description": "Similar to function(io.input), but operates over the default output file.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-io.output",
      "replacementPrefix": "iooutput"
    },
    {
      "snippet": "io.popen(${1:prog}${2:, ${3:mode}})$0",
      "type": "function",
      "rightLabelHTML": "io.popen(prog[, mode])",
      "description": "Starts a program in a separated process and returns a file handle that you can use to read data from this program (if mode is \"r\", the default) or to write data to this program (if mode is \"w\").",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-io.popen",
      "replacementPrefix": "iopopen"
    },
    {
      "snippet": "io.read(${1:formats})$0",
      "type": "function",
      "rightLabelHTML": "io.read([formats])",
      "description": "Reads the current output file, according to the given formats. Available formats are \"n\", \"a\", \"l\", \"L\" or a number.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-io.read",
      "replacementPrefix": "ioread"
    },
    {
      "snippet": "io.tmpfile()",
      "type": "function",
      "rightLabelHTML": "io.tmpfile()",
      "description": "In case of success, returns a handle for a temporary file. This file is opened in update mode and it is automatically removed when the program ends.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-io.tmpfile",
      "replacementPrefix": "iotmpfile"
    },
    {
      "snippet": "io.type(${1:obj})$0",
      "type": "function",
      "rightLabelHTML": "io.type(obj)",
      "description": "Checks whether the object is a valid file handle. Returns the string \"file\" if the object is an open file handle, \"closed file\" if the object is a closed file handle, or nil if the object is not a file handle.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-io.type",
      "replacementPrefix": "iotype"
    },
    {
      "snippet": "io.write(${1:args})$0",
      "type": "function",
      "rightLabelHTML": "io.write([args])",
      "description": "Writes the value of each of its arguments on the current output file. The arguments must be strings or numbers.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-io.write",
      "replacementPrefix": "iowrite"
    },
    {
      "snippet": "file:close()",
      "type": "function",
      "rightLabelHTML": "file:close()",
      "description": "Closes the file.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-file:close",
      "replacementPrefix": "fileclose"
    },
    {
      "snippet": "file:flush()",
      "type": "function",
      "rightLabelHTML": "file:flush()",
      "description": "Saves any written data to the file.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-file:flush",
      "replacementPrefix": "fileflush"
    },
    {
      "snippet": "file:lines(${1:formats})$0",
      "type": "function",
      "rightLabelHTML": "file:lines([formats])",
      "description": "Returns an iterator function that, each time it is called, reads the file according to the given formats.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-file:lines",
      "replacementPrefix": "filelines"
    },
    {
      "snippet": "file:read(${1:formats})$0",
      "type": "function",
      "rightLabelHTML": "file:read([formats])",
      "description": "Reads the file, according to the given formats. Available formats are \"n\", \"a\", \"l\", \"L\" or a number.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-file:read",
      "replacementPrefix": "fileread"
    },
    {
      "snippet": "file:seek(${1:${2:whence}${3:, ${4:offset}}})$0",
      "type": "function",
      "rightLabelHTML": "file:seek([whence[, offset]])",
      "description": "Returns the final file position, measured in bytes from the beginning of the file.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-file:seek",
      "replacementPrefix": "fileseek"
    },
    {
      "snippet": "file:setvbuf(${1:mode}${2:, ${3:size}})$0",
      "type": "function",
      "rightLabelHTML": "file:setvbuf(mode[, size])",
      "description": "Sets the buffering mode for an output file.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-file:setvbuf",
      "replacementPrefix": "filesvbuf"
    },
    {
      "snippet": "file:write(${1:args})$0",
      "type": "function",
      "rightLabelHTML": "file:write([args])",
      "description": "Writes the value of each of its arguments on the file. The arguments must be strings or numbers.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-file:write",
      "replacementPrefix": "filewrite"
    }
  ],
  "os": [
    {
      "snippet": "os.clock()",
      "type": "function",
      "rightLabelHTML": "os.clock()",
      "description": "Returns the approximate cpu time the application ran.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-os.clock",
      "replacementPrefix": "osclock"
    },
    {
      "snippet": "os.date(${1:${2:format}${3:, ${4:time}}})$0",
      "type": "function",
      "rightLabelHTML": "os.date([format[, time]])",
      "description": "Returns the date/time as a formatted string or in a table. ",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-os.date",
      "replacementPrefix": "osdate"
    },
    {
      "snippet": "os.difftime(${1:t2}, ${2:t1})$0",
      "type": "function",
      "rightLabelHTML": "os.difftime(t2, t1)",
      "description": "Subtracts the second of the first value and rounds the result.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-os.difftime",
      "replacementPrefix": "osdiff"
    },
    {
      "snippet": "os.execute(${1:cmd})$0",
      "type": "function",
      "rightLabelHTML": "os.execute([cmd])",
      "description": "Passes a command to be executed by an operating system shell. This function is equivalent to the ISO C function(system).",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-os.execute",
      "replacementPrefix": "osexec"
    },
    {
      "snippet": "os.exit(${1:${2:code}${3:, ${4:close}}})$0",
      "type": "function",
      "rightLabelHTML": "os.exit([code[, close]])",
      "description": "Calls the ISO C function(exit) to terminate the host program.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-os.exit",
      "replacementPrefix": "osexit"
    },
    {
      "snippet": "os.getenv(${1:var})$0",
      "type": "function",
      "rightLabelHTML": "os.getenv(var)",
      "description": "Returns the value of the give process environment variable. Returns nil if the variable is not defined.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-os.getenv",
      "replacementPrefix": "osgenv"
    },
    {
      "snippet": "os.remove(${1:file})$0",
      "type": "function",
      "rightLabelHTML": "os.remove(file)",
      "description": "Deletes the file (or empty directory, on POSIX systems) with the given name.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-os.remove",
      "replacementPrefix": "osrem"
    },
    {
      "snippet": "os.rename(${1:old_name}, ${2:new_name})$0",
      "type": "function",
      "rightLabelHTML": "os.rename(oldName, newName)",
      "description": "Renames the file or directory named 'oldName' to 'newName'.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-os.rename",
      "replacementPrefix": "osren"
    },
    {
      "snippet": "os.setlocale(${1:locale}${2:, ${3:category}})$0",
      "type": "function",
      "rightLabelHTML": "os.setlocale(locale[, category])",
      "description": "Sets the current locale of the program.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-os.setlocale",
      "replacementPrefix": "osslocale"
    },
    {
      "snippet": "os.time(${1:tbl})$0",
      "type": "function",
      "rightLabelHTML": "os.time([tbl])",
      "description": "Returns the system time in seconds past the unix epoch. If a table is supplied, the function attempts to build a system time with the specified table members.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-os.time",
      "replacementPrefix": "ostime"
    },
    {
      "snippet": "os.tmpname()",
      "type": "function",
      "rightLabelHTML": "os.tmpname()",
      "description": "Returns a string with a file name that can be used for a temporary file.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-os.tmpname",
      "replacementPrefix": "ostmpname"
    }
  ],
  "debug": [
    {
      "snippet": "debug.debug()",
      "type": "function",
      "rightLabelHTML": "debug.debug()",
      "description": "Enters an interactive mode with the user, running each string that the user enters.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.debug",
      "replacementPrefix": "deb"
    },
    {
      "snippet": "debug.gethook(${1:thread})$0",
      "type": "function",
      "rightLabelHTML": "debug.gethook([thread])",
      "description": "Returns the current hook settings of the passed thread. The thread argument can be omitted.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.gethook",
      "replacementPrefix": "debghook"
    },
    {
      "snippet": "debug.getinfo(${1:${2:thread}, }${3:func_level}${4:, ${5:fields}})$0",
      "type": "function",
      "rightLabelHTML": "debug.getinfo([thread, ]func_level[, fields])",
      "description": "Returns debug information about a function.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.getinfo",
      "replacementPrefix": "debginfo"
    },
    {
      "snippet": "debug.getlocal(${1:${2:thread}, }${3:func_level}, ${4:index})$0",
      "type": "function",
      "rightLabelHTML": "debug.getlocal([thread, ]func_level, index)",
      "description": "Gets the name and value of a local variable indexed from the level/function.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.getlocal",
      "replacementPrefix": "debglocal"
    },
    {
      "snippet": "debug.getmetatable(${1:obj})$0",
      "type": "function",
      "rightLabelHTML": "debug.getmetatable(obj)",
      "description": "Returns the metatable of an object. This function ignores the metatable's __metatable field.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.getmetatable",
      "replacementPrefix": "debgmeta"
    },
    {
      "snippet": "debug.getregistry()",
      "type": "function",
      "rightLabelHTML": "debug.getregistry()",
      "description": "Returns the internal Lua registry table. The Lua registry is used by the engine and binary modules to create references to Lua values.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.getregistry",
      "replacementPrefix": "debgreg"
    },
    {
      "snippet": "debug.getupvalue(${1:func}, ${2:index})$0",
      "type": "function",
      "rightLabelHTML": "debug.getupvalue(func, index)",
      "description": "Used for getting variable values in an index from the passed function. This does nothing for C functions.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.getupvalue",
      "replacementPrefix": "debgup"
    },
    {
      "snippet": "debug.getuservalue(${1:udata})$0",
      "type": "function",
      "rightLabelHTML": "debug.getuservalue(udata)",
      "description": "Gets the value of a user variable.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.getuservalue",
      "replacementPrefix": "debguser"
    },
    {
      "snippet": "debug.sethook(${1:${2:thread}, }${3:hook}, ${4:mask}${5:, ${6:count}})$0",
      "type": "function",
      "rightLabelHTML": "debug.sethook([thread, ]hook, mask[, count])",
      "description": "Sets the given function as a Lua hook. The thread argument can be completely omitted and calling this function with no arguments will remove the current hook.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.sethook",
      "replacementPrefix": "debshook"
    },
    {
      "snippet": "debug.setlocal(${1:${2:thread}, }${3:level}, ${4:index}, ${5:value})$0",
      "type": "function",
      "rightLabelHTML": "debug.setlocal([thread, ]level, index, value)",
      "description": "Sets a local variable's value.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.setlocal",
      "replacementPrefix": "debslocal"
    },
    {
      "snippet": "debug.setmetatable(${1:obj}, ${2:metatbl})$0",
      "type": "function",
      "rightLabelHTML": "debug.setmetatable(obj, metatbl)",
      "description": "Sets the object's metatable. Unlike setmetatable, this function works regardless of whether the first object passed is a valid table or not; this function even works on primitive datatypes such as numbers, functions, and even nil.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.setmetatable",
      "replacementPrefix": "debsmeta"
    },
    {
      "snippet": "debug.setupvalue(${1:func}, ${2:index}, ${3:value})$0",
      "type": "function",
      "rightLabelHTML": "debug.setupvalue(func, index, value)",
      "description": "Sets the variable indexed from func.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.setupvalue",
      "replacementPrefix": "debsup"
    },
    {
      "snippet": "debug.setuservalue(${1:udata}, ${2:value})$0",
      "type": "function",
      "rightLabelHTML": "debug.setuservalue(udata, value)",
      "description": "Sets a user variable's value. Returns the value.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.setuservalue",
      "replacementPrefix": "debsuser"
    },
    {
      "snippet": "debug.traceback(${1:${2:thread}, }${3:${4:msg}${5:, ${6:level}}})$0",
      "type": "function",
      "rightLabelHTML": "debug.traceback([thread, ][msg[, level]])",
      "description": "Returns a full execution stack trace.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.traceback",
      "replacementPrefix": "debtb"
    },
    {
      "snippet": "debug.upvalueid(${1:func}, ${2:index})$0",
      "type": "function",
      "rightLabelHTML": "debug.upvalueid(func, index)",
      "description": "Returns an unique identifier for the upvalue indexed from func.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.upvalueid",
      "replacementPrefix": "debupid"
    },
    {
      "snippet": "debug.upvaluejoin(${1:f1}, ${2:n1}, ${3:f2}, ${4:n2})$0",
      "type": "function",
      "rightLabelHTML": "debug.upvaluejoin(f1, n1, f2, n2)",
      "description": "Make the n1-th upvalue of the Lua closure f1 refer to the n2-th upvalue of the Lua closure f2.",
      "descriptionMoreURL": "https://www.lua.org/manual/5.3/manual.html#pdf-debug.upvaluejoin",
      "replacementPrefix": "debupjoin"
    }
  ]
}
